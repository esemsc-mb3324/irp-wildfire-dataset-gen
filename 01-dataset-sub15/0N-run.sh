#!/bin/bash

# this bash file will set a number runs for the number of times to run 01-run.sh.
# It will save the run number is input_tracking.txt which is set up in a csv format.
# It will save the run number so that the rest of the params can be written on the same line
# by set_params.py (which writes the rest of the params). This should be the
# structure of the input_tracking.txt file: run, xign,yign,fuel,slp,asp,ws,wd,m1,m10,m100,cc,ch,cbh,cbd,lhc,lwc
# The first line is the header, and the rest of the lines are the runs.
# After writing the number, the script will call set_params.py to write the rest of the parameters
# and to set the parameters in elmfire.data.in and 01-run.sh. Then, it will call 01-run.sh to run the simulation.
# It will then create a directory in ./cases called ./case_{run} and move the inputs and outputs folders
# that are generated by 01-run.sh as ./inputs and ./outputs in that directory.

if [ -z "$1" ]; then
    echo "Usage: $0 <number_of_runs>"
    exit 1
fi

NUM_RUNS=$1
if [ -z "$2" ]; then
    TSTOP=22100.0  # Default simulation stop time
else
    TSTOP=$2
fi
# get domain size and tstop from command line arguments
if [ -z "$3" ]; then
    DOMAIN_SIZE=3840.0  # Default domain size
else
    DOMAIN_SIZE=$3
fi

# replace input_tracking.txt with the header
echo "run,xign,yign,fuel,slp,asp,ws,wd,m1,m10,m100,cc,ch,cbh,cbd,lhc,lwc" > input_tracking.txt
# reset sim_times.txt
echo "run,sim_time" > sim_times.txt

RUN_DIR="./cases"
rm -rf $RUN_DIR
mkdir -p $RUN_DIR
for (( run=0; run<=NUM_RUNS; run++ )); do
    echo "Running simulation for run number: $run"
    
    # Call set_params.py to set the parameters
    python3 set_params.py $run $TSTOP $DOMAIN_SIZE

    bash 01-run.sh
    
    # Create a directory for this run and move inputs and outputs
    RUN_CASE_DIR="$RUN_DIR/case_$run"
    mkdir -p $RUN_CASE_DIR
    mv outputs/* $RUN_CASE_DIR/
    
done
